import tkinter as tk
import base64
import os
import pygame

pygame.display.set_caption("Calculator")

# Base64-encoded icon string
icon_string = ""  # You need to provide the actual base64-encoded icon string

def get_icon_data():
    return base64.b64decode(icon_string)

root = tk.Tk()
root.geometry("288x411")

root.wm_title("Calculator")  # Set the window title

# Load icon from resources
icon_data = get_icon_data()
# Create a temporary file to store the icon data
icon_file = "temp_icon.ico" 
with open(icon_file, "wb") as f:
    f.write(icon_data)
# Set the icon using the temporary file
root.iconbitmap(icon_file)
# Remove the temporary file
os.remove(icon_file)

calculation = ""

def add_to_calculation(symbol):
    global calculation
    calculation += str(symbol)
    entry_field.delete(0, tk.END)
    entry_field.insert(tk.END, calculation)

def evaluate_calculation():
    global calculation
    try:
        result = str(eval(calculation))
        entry_field.delete(0, tk.END)
        entry_field.insert(tk.END, result)
        calculation = ""
    except Exception as e:
        entry_field.delete(0, tk.END)
        entry_field.insert(tk.END, "Error")

def clear_field():
    global calculation
    calculation = ""
    entry_field.delete(0, tk.END)

entry_field = tk.Entry(root, width=35, borderwidth=5)
entry_field.grid(row=0, column=0, columnspan=4)

button_1 = tk.Button(root, text="1", padx=40, pady=20, command=lambda: add_to_calculation(1))
button_2 = tk.Button(root, text="2", padx=40, pady=20, command=lambda: add_to_calculation(2))
button_3 = tk.Button(root, text="3", padx=40, pady=20, command=lambda: add_to_calculation(3))
button_4 = tk.Button(root, text="4", padx=40, pady=20, command=lambda: add_to_calculation(4))
button_5 = tk.Button(root, text="5", padx=40, pady=20, command=lambda: add_to_calculation(5))
button_6 = tk.Button(root, text="6", padx=40, pady=20, command=lambda: add_to_calculation(6))
button_7 = tk.Button(root, text="7", padx=40, pady=20, command=lambda: add_to_calculation(7))
button_8 = tk.Button(root, text="8", padx=40, pady=20, command=lambda: add_to_calculation(8))
button_9 = tk.Button(root, text="9", padx=40, pady=20, command=lambda: add_to_calculation(9))
button_0 = tk.Button(root, text="0", padx=40, pady=20, command=lambda: add_to_calculation(0))
button_add = tk.Button(root, text="+", padx=40, pady=20, command=lambda: add_to_calculation("+"))
button_subtract = tk.Button(root, text="-", padx=40, pady=20, command=lambda: add_to_calculation("-"))
button_multiply = tk.Button(root, text="*", padx=40, pady=20, command=lambda: add_to_calculation("*"))
button_divide = tk.Button(root, text="/", padx=40, pady=20, command=lambda: add_to_calculation("/"))
button_equals = tk.Button(root, text="=", padx=40, pady=20, command=evaluate_calculation)
button_clear = tk.Button(root, text="Clear", padx=40, pady=20, command=clear_field)

button_1.grid(row=1, column=0)
button_2.grid(row=1, column=1)
button_3.grid(row=1, column=2)

button_4.grid(row=2, column=0)
button_5.grid(row=2, column=1)
button_6.grid(row=2, column=2)

button_7.grid(row=3, column=0)
button_8.grid(row=3, column=1)
button_9.grid(row=3, column=2)

button_0.grid(row=4, column=0)
button_add.grid(row=4, column=1)
button_subtract.grid(row=4, column=2)

button_multiply.grid(row=5, column=0)
button_divide.grid(row=5, column=1)
button_equals.grid(row=5, column=2)

button_clear.grid(row=6, column=0, columnspan=4)

root.mainloop()
